{"version":3,"sources":["components/Navbar.js","components/forms.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","Fragment","className","concat","color","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","document","body","style","backgroundColor","querySelector","background","name","htmlFor","Textform","_useState","useState","_useState2","Object","slicedToArray","text","setText","heading","placeholder","onChange","event","target","value","mode","textColor","cols","rows","newText","toUpperCase","showAlert","toLowerCase","window","confirm","split","join","splitText","forEach","e","pop","i","length","slice","textarea","getElementById","select","navigator","clipboard","writeText","defaultProps","aboutText","Alert","alert","role","word","lower","charAt","capitalize","message","App","setAlert","_useState3","_useState5","_useState7","_useState9","_useState10","setcolor","setColorFunction","about","components_Alert","setTimeout","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.b6870387.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n      const setWhiteColor = ()=>{\r\n            document.body.style.backgroundColor = 'white'\r\n            document.body.style.color = 'black'\r\n            // props.setColorFunction('light')\r\n            let getForColor = document.querySelector('.getForColor')\r\n            getForColor.style.background = '#f8f9fa'\r\n            document.title = 'TextUtils - Light Mode'\r\n      }     \r\n\r\n      const setDarkColor = ()=>{\r\n            document.body.style.backgroundColor = 'rgb(1 16 25)'\r\n            \r\n            document.body.style.color = 'white'\r\n            // props.setColorFunction('dark')\r\n            let getForColor = document.querySelector('.getForColor')\r\n            getForColor.style.background = 'rgb(1 16 25)'\r\n            document.title = 'TextUtils - Dark Mode'\r\n\r\n      }\r\n\r\n      const setRedColor = ()=>{\r\n            document.body.style.backgroundColor = 'rgb(51 1 1)'\r\n            document.body.style.color = 'white'\r\n            let getForColor = document.querySelector('.getForColor')\r\n            getForColor.style.background = 'red'\r\n            document.title = 'TextUtils - Redes Mode'\r\n\r\n      }\r\n      \r\n      const setYellowColor =()=>{\r\n            document.body.style.backgroundColor = 'rgb(104 104 104 / 70%)'\r\n            document.body.style.color = 'white'\r\n            let getForColor = document.querySelector('.getForColor')\r\n            getForColor.style.background = 'rgb(104 104 104)'\r\n            document.title = 'TextUtils - Sky Mode'\r\n\r\n      }\r\n\r\n      return (\r\n            <div>\r\n                  <>\r\n                        <nav className={` navbar navbar-expand-lg navbar-${props.color}$ bg-${props.color}`}>\r\n                              <div className=\"getForColor container-fluid\">\r\n                             <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                              <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                                          <span className=\"navbar-toggler-icon\"></span>\r\n                           </button>\r\n                             <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                              <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                                                <li className=\"nav-item\">\r\n                                                      <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                                                </li>\r\n                                                {/* <li className=\"nav-item\">\r\n                                                      <a className=\"nav-link\" href='#'>{props.about}</a>\r\n                                                </li> */}\r\n\r\n                               </ul>\r\n                              {/* <div className=\"container checkbox\">\r\n                                  <div className={` form-check form-switch  text-${props.textColor}`}>\r\n                                                      <input onClick={props.toogleMode} className=\"form-check-input sev_check\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                                                      <label className=\"form-check-label form-checkbox form-icon \" htmlFor=\"flexSwitchCheckDefault\">{props.text}</label>\r\n                                                </div>\r\n                                          </div>\r\n                                          <div className=\"container checkbox\">\r\n                                                <div className={`form-checkbox form-icon form-check form-switch  text-${props.textColor}`}>\r\n                                                      <input onClick={props.toogleRedMode} className=\"form-check-input sev_check\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                                                      <label className=\"form-check-label form-checkbox form-icon \" htmlFor=\"flexSwitchCheckDefault\">{props.redMode}</label>\r\n                                                </div>\r\n                                          </div>\r\n                                          <div className=\"container checkbox\">\r\n                                                <div className={`form-checkbox form-icon form-check form-switch text-${props.textColor}`}>\r\n                                                      <input onClick={props.toogleMode} className=\"form-check-input sev_check\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                                                      <label className=\"form-check-label form-checkbox form-icon \" htmlFor=\"flexSwitchCheckDefault\">{props.text}</label>\r\n                                                </div>\r\n                                          </div>\r\n                                          <div className=\"container checkbox\">\r\n                                                <div className={`form-checkbox form-icon form-check form-switch text-${props.textColor}`}>\r\n                                                      <input onClick={props.toogleMode} className=\"form-check-input sev_check\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                                                      <label className=\"form-check-label form-checkbox form-icon \" htmlFor=\"flexSwitchCheckDefault\">{props.text}</label>\r\n                                                </div>\r\n                                          </div> */}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n {/* ===================================================== THE NEW CODE IS FOLLOWING =================================================== */}\r\n\r\n<div className=\"form-check mx-5\">\r\n  <input className=\"form-check-input\" onClick={setWhiteColor}  type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault1\" />\r\n  <label className=\"form-check-label\" htmlFor=\"flexRadioDefault1\">\r\n  setWhiteColor\r\n  </label>\r\n</div><div className=\"form-check mx-5\">\r\n  <input className=\"form-check-input\" onClick={setDarkColor} type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault1\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexRadioDefault1\">\r\n  setDarkColor\r\n  </label>\r\n</div><div className=\"form-check mx-5\">\r\n  <input className=\"form-check-input\" onClick={setRedColor} type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault1\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexRadioDefault1\">\r\n  setRedColor\r\n  </label>\r\n</div><div className=\"form-check mx-5\">\r\n  <input className=\"form-check-input\" onClick={setYellowColor} type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault1\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexRadioDefault1\">\r\n  setYellowColor\r\n  </label>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                          {/* <form className=\"d-flex\">\r\n                                                <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                                                <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                                          </form> */}\r\n                                    </div>\r\n                              </div>\r\n                        </nav>\r\n                  </>\r\n            </div>\r\n      )\r\n}\r\n\r\n\r\nNavbar.propTypes = {\r\n      title: PropTypes.string.isRequired,\r\n      aboutText: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n      title: 'default',\r\n      aboutText: 'default'\r\n}","import React, { useState } from 'react'\r\n\r\n\r\nexport default function Textform(props) {\r\n      const copy = () => {\r\n            let textarea = document.getElementById('textarea')\r\n            textarea.select()\r\n            navigator.clipboard.writeText(textarea.value)\r\n            props.showAlert('Copy to clipboard', 'success ')\r\n      }\r\n      const removeExtraSpaces = () => {\r\n            let newText = text.split(/[ ]+/)\r\n            setText(newText.join(' '))\r\n            props.showAlert('Remove extra spaces', 'success ')\r\n\r\n      }\r\n      const toUpper = () => {\r\n            // console.log('Uppercase was clicked');\r\n            const newText = text.toUpperCase()\r\n            setText(newText)\r\n            props.showAlert('Conver into Uppercase', 'success ')\r\n\r\n      }\r\n\r\n      const title = () => {\r\n            let newText = text.split(/[ ]+/)\r\n                  setText(newText.join(' '))\r\n            let splitText = text.toLowerCase().split(' ')\r\n\r\n            splitText.forEach((e) => {\r\n                  if (e === '') {\r\n                        splitText.pop()\r\n                  }\r\n            })\r\n\r\n            for (let i = 0; i < splitText.length; i++) {\r\n                  \r\n                  splitText[i] = splitText[i][0].toUpperCase() + splitText[i].slice(1)\r\n\r\n            }\r\n            setText(splitText.join(' '))\r\n            props.showAlert('Conver into Title Case', 'success ')\r\n\r\n\r\n\r\n      }\r\n      const clear = () => {\r\n            // console.log('Uppercase was clicked');\r\n            let conf = window.confirm('You are sure! You want to delete this text')\r\n            if (conf === true) {\r\n                  const newText = ' '\r\n                  setText(newText)\r\n                  props.showAlert('Clear text', 'success ')\r\n\r\n            }\r\n            else {\r\n                  setText(text)\r\n                  props.showAlert('Cancel clear text', 'danger ')\r\n\r\n            }\r\n      }\r\n      const toLower = () => {\r\n            // console.log('Uppercase was clicked');\r\n            const newText = text.toLowerCase()\r\n            setText(newText)\r\n            props.showAlert('Convet into Lowercase', 'success ')\r\n\r\n      }\r\n      const handleOnChange = (event) => {\r\n            // console.log('on change');\r\n            setText(event.target.value)\r\n            // setText('you change the text of input')\r\n      }\r\n      const [text, setText] = useState('')\r\n      return (\r\n            <div className=\"mb-3\">\r\n                  <h1 className='my-3 mb-3'>{props.heading}</h1>\r\n\r\n                  <textarea placeholder='Enter here' onChange={handleOnChange} value={text} className={`form-control bg-${props.mode} text-${props.textColor}`}\r\n                        id=\"textarea\" cols=\"30\" rows=\"10\"></textarea>\r\n                  <div id=\"emailHelp\" className=\"form-text\">We'll never share your text with anyone else.</div>\r\n\r\n                  <button type=\"submit\" onClick={toUpper} className=\"btn btn-primary my-3\">Convert into UpperCase</button>\r\n                  <button type=\"submit\" onClick={toLower} className=\"btn btn-primary mx-3\">Convert into LowerCase</button>\r\n                  <button type=\"submit\" onClick={clear} className=\"btn btn-primary\">Clear Text</button>\r\n                  <button type=\"submit\" onClick={title} className=\"btn btn-primary mx-3\">Title Case</button>\r\n                  <button type=\"submit\" onClick={copy} className=\"btn btn-primary \">Copy Text</button>\r\n                  <button type=\"submit\" onClick={removeExtraSpaces} className=\"btn btn-primary mx-3 \">RemoveExtraSpaces</button>\r\n\r\n                  <h1 className='my-3'>Your Text Summary</h1>\r\n                  <p><b>{text.split(' ').length}</b> words and <b>{text.length}</b> characters</p>\r\n                  <p><b>{text.split(' ').length * 0.008}</b> ! to read</p>\r\n                  <h1>Preview Text here</h1>\r\n                  <p>{text.length > 0 ? text : 'Enter text to preview'}</p>\r\n            </div>\r\n\r\n      )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n      const capitalize = (word)=>{\r\n            const lower = word.toLowerCase();\r\n            return lower.charAt(0).toUpperCase() + lower.slice(1)\r\n      }\r\n      return (\r\n            props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                  <strong>{capitalize(props.alert.type)}</strong>{props.alert.message}\r\n                  {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n            </div>\r\n      )\r\n}\r\n\r\nexport default Alert\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Text from './components/forms'\n// import About from './components/About';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n// import { Switch } from 'react-router-dom';\n\n\n\nfunction App() {\n\n  const [alert, setAlert] = useState(null)\n  // function set alert\n  const showAlert = (message, type) => {\n    setAlert({\n      message: message,\n      type: type\n    })\n\n    setTimeout(() => {\n      setAlert(null)\n    }, 3000);\n  }\n  const [mode] = useState('light');\n  const [text] = useState('Enable Dark Mode')\n  // const [redMode, setRedModeText] = useState('Enable Redes Mode')\n  const [textColor] = useState('black')\n\n\n  // ======================================== NEW CODE FOLLOWING ========================================\n\n  const [color, setcolor] = useState('light')\n\n  const setColorFunction = (color) => {\n    setcolor(color)\n  }\n\n\n\n\n\n\n  // const toogleMode = () => {\n  //   if (mode === 'light' || document.body.style.background === 'rgb(51, 1, 1)' || document.body.style.background === 'white') {\n  //     console.log('im in if');\n\n  //     setMode('dark')\n  //     setText('Enable white Mode')\n  //     setTextColor('white')\n  //     document.body.style.background = 'rgb(1 16 25)'\n  //     document.body.style.color = 'white'\n  //     showAlert('Dark mode is Enable', 'success ')\n  //   }\n  //   else {\n  //     console.log('im in else');\n\n  //     setMode('light')\n  //     setText('Enable Dark Mode')\n  //     setTextColor('black')\n  //     document.body.style.background = 'white'\n  //     document.body.style.color = 'black'\n  //     showAlert('Light mode is Enable', 'success ')\n  //     setTimeout(() => {\n\n  //     }, 5000);\n  //   }\n  // }\n  // const toogleRedMode = () => {\n  //   if (mode === 'light' || mode === 'rgb(1,16,25)' || document.body.style.background ==='white') {\n  //     console.log('shyam bhai in redes');\n\n  //     setMode('dark')\n  //     setRedModeText('Enable white Mode')\n  //     setTextColor('white')\n  //     document.body.style.background = 'rgb(51 1 1)'\n  //     document.body.style.color = 'white'\n  //     showAlert('Redes mode is Enable', 'success ')\n  //   }\n  //   else {\n  //     setMode('rgb(224 4 4)')\n  //     setRedModeText('Enable Redes Mode')\n  //     setTextColor('black')\n  //     document.body.style.background = 'white'\n  //     document.body.style.color = 'black'\n  //     showAlert('Light mode is Enable', 'success ')\n  //     setTimeout(() => {\n\n  //     }, 5000);\n  //   }\n  // }\n  // const toogleMode = () => {\n  //   if (mode === 'light') {\n  //     setMode('dark')\n  //     setText('Enable white Mode')\n  //     setTextColor('white')\n  //     document.body.style.background = 'rgb(1 16 25)'\n  //     document.body.style.color = 'white'\n  //     showAlert('Dark mode is Enable', 'success ')\n  //   }\n  //   else {\n  //     setMode('light')\n  //     setText('Enable Dark Mode')\n  //     setTextColor('black')\n  //     document.body.style.background = 'white'\n  //     document.body.style.color = 'black'\n  //     showAlert('Light mode is Enable', 'success ')\n  //     setTimeout(() => {\n\n  //     }, 5000);\n  //   }\n  // }\n  // const toogleMode = () => {\n  //   if (mode === 'light') {\n  //     setMode('dark')\n  //     setText('Enable white Mode')\n  //     setTextColor('white')\n  //     document.body.style.background = 'rgb(1 16 25)'\n  //     document.body.style.color = 'white'\n  //     showAlert('Dark mode is Enable', 'success ')\n  //   }\n  //   else {\n  //     setMode('light')\n  //     setText('Enable Dark Mode')\n  //     setTextColor('black')\n  //     document.body.style.background = 'white'\n  //     document.body.style.color = 'black'\n  //     showAlert('Light mode is Enable', 'success ')\n  //     setTimeout(() => {\n\n  //     }, 5000);\n  //   }\n  // }\n\n\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar color={color} setColorFunction={setColorFunction} title='TextUtiles' about='About' mode={mode} text={text} />\n        <Alert alert={alert} />\n        <div className=\"container\">\n          {/* <Switch>\n            <Route path=\"/about\"> */}\n              \n        {/* <About mode={mode} textColor={textColor} /> */}\n            {/* </Route> */}\n\n            {/* <Route path=\"/\"> */}\n              <Text showAlert={showAlert} mode={mode} textColor={textColor} heading='Enter Text here to analize' />\n\n            {/* </Route>\n          </Switch> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}